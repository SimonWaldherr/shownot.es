{"name":"cre-114","error":null,"text":"HEADER\nPodcast: cre\nEpisode: cre-114\nStarttime: Sun Mar 15 2009 00:00:00 GMT+0200 (CEST)\nrelativeTimestamps: no\nEndtime: \nPodcaster: Tim Pritlove (@timpritlove), Tim Sander <http://www.vlsi.informatik.tu-darmstadt.de/staff/tstone/>\nShownoter: @mxmerz <https://twitter.com/mxmerz>\nChat: \nStream: \nWebseite: <http://cre.fm/>\nEpisodepage: <http://cre.fm/cre114-llvm>\nEpisodetitle: CRE130 LLVM\n/HEADER\n\n00:00:00 Intro #chapter\n00:00:01 Jon Stewart <http://de.wikipedia.org/wiki/Jon_Stewart>\n00:00:34 CRE Intro\n\n00:01:01 Begrüßung #chapter\n00:01:10 Tim ist immer noch auf Reisen\n00:01:25 LLVM (Low Level Virtual Machine) <https://de.wikipedia.org/wiki/LLVM> #glossary\n00:01:39 Tim Sander <http://www.vlsi.informatik.tu-darmstadt.de/staff/tstone/>\n00:01:54 TU Darmstadt <http://www.tu-darmstadt.de/>\n\n00:02:01 Hardware Software Co-Design #chapter\n00:03:58 Compiler <https://de.wikipedia.org/wiki/Compiler> #glossary\n00:04:30 Bus <https://de.wikipedia.org/wiki/Bus_(Datenverarbeitung)> #glossary\n00:04:31 Multiplexer <https://de.wikipedia.org/wiki/Multiplexer> #glossary\n00:04:54 CPU <https://de.wikipedia.org/wiki/Prozessor> #glossary\n00:04:56 Registersatz <https://de.wikipedia.org/wiki/Registersatz> #glossary\n00:05:12 Pipeline <https://de.wikipedia.org/wiki/Pipeline_(Prozessor)> #glossary\n00:05:38 GCC <https://de.wikipedia.org/wiki/GNU_Compiler_Collection> #glossary\n00:06:28 Anwendungsfälle für Hardware Software Co-Design\n00:06:59 Koprozessor <https://de.wikipedia.org/wiki/Koprozessor> #glossary\n00:07:01 FPGA <https://de.wikipedia.org/wiki/Field_Programmable_Gate_Array> #glossary\n00:07:20 Fehlertoleranz <https://de.wikipedia.org/wiki/Fehlertoleranz> #glossary\n00:07:47 Grundlagenforschung <https://de.wikipedia.org/wiki/Grundlagenforschung> #glossary\n00:08:07 Grafikkarte <https://de.wikipedia.org/wiki/Grafikkarte> #glossary\n00:08:27 Moore’s Law <https://de.wikipedia.org/wiki/Mooresches_Gesetz> #glossary\n00:08:30 Transistor <https://de.wikipedia.org/wiki/Transistor> #glossary\n00:08:52 Parallelisierung <https://de.wikipedia.org/wiki/Nebenl%C3%A4ufigkeit> #glossary\n\n00:09:03 LLVM Überblick #chapter\n00:09:06 GCC <https://de.wikipedia.org/wiki/GNU_Compiler_Collection> #glossary\n00:09:39 The LLVM Compiler Infrastructure <http://www.llvm.org/>\n00:10:10 LLVM ist modular aufgebaut\n00:11:07 Geschichte von LLVM\n00:11:22 Lifelong Optimization\n00:13:04 JIT-Compilation (“JITing”) <https://de.wikipedia.org/wiki/Just-in-time-Kompilierung> #glossary\n00:13:10 Skriptsprachen <https://de.wikipedia.org/wiki/Skriptsprache> #glossary\n00:13:18 Interpreter <https://de.wikipedia.org/wiki/Interpreter> #glossary\n00:13:20 Bytecode <https://de.wikipedia.org/wiki/Bytecode> #glossary\n00:13:27 Maschinencode <https://de.wikipedia.org/wiki/Maschinensprache> #glossary\n00:14:17 Dynamische Typisierung <https://de.wikipedia.org/wiki/Dynamische_Typisierung> #glossary\n00:14:37 Javascript <https://de.wikipedia.org/wiki/JavaScript> #glossary\n00:15:10 Komponenten von LLVM\n00:15:30 llvmc (LLVM Compiler Driver) <http://llvm.org/releases/2.7/docs/CommandGuide/html/llvmc.html>\n\n00:15:56 LLVM Frontend #chapter\n00:15:58 GCC-Frontend <http://dragonegg.llvm.org/>\n00:16:47 Brainfuck <https://de.wikipedia.org/wiki/Brainfuck> #glossary\n00:17:01 Zwischencode <https://de.wikipedia.org/wiki/Zwischencode> #glossary\n00:17:24 Static Single Assignments <https://en.wikipedia.org/wiki/Static_single_assignment_form> #glossary\n00:18:06 GCC hat mit Version 4 auf SSA umgestellt\n00:18:23 Alle LLVM-Optimierungsläufe laufen auf der internen Beschreibungssprache\n00:18:34 Parser <https://de.wikipedia.org/wiki/Parser> #glossary\n00:19:09 Java <https://de.wikipedia.org/wiki/Java_(Programmiersprache)> #glossary\n00:19:17 C <https://de.wikipedia.org/wiki/C_(Programmiersprache)> #glossary\n00:19:18 C++ <https://de.wikipedia.org/wiki/C%2B%2B> #glossary\n00:19:20 Fortran <https://de.wikipedia.org/wiki/Fortran> #glossary\n00:19:26 Objective-C <https://de.wikipedia.org/wiki/Objective-C> #glossary\n00:21:37 GPL <https://de.wikipedia.org/wiki/GNU_General_Public_License> #glossary\n00:21:40 LLVM Lizenz <http://llvm.org/releases/3.4/LICENSE.TXT>\n00:21:41 University of Illinois/NCSA Open Source License <http://opensource.org/licenses/UoI-NCSA.php>\n00:21:42 BSD <https://de.wikipedia.org/wiki/BSD-Lizenz> #glossary\n00:22:06 Andere Frontends\n00:22:08 clang\n00:22:09 - Wikipedia <https://de.wikipedia.org/wiki/Clang> #glossary\n00:22:10 - Projekt-Homepage <http://clang.llvm.org>\n00:22:54 Assembler <https://de.wikipedia.org/wiki/Assembler_(Informatik)> #glossary\n\n00:23:41 LLVM Middleware #chapter\n00:24:06 Optimierungsläufe\n00:24:14 Dead Code elimination <https://de.wikipedia.org/wiki/Dead_code_elimination> #glossary\n\n00:25:53 LLVM Backend #chapter\n00:26:06 Beschreibung der Ziel-Maschine\n00:26:28 Von-Neumann-Architektur <https://de.wikipedia.org/wiki/Von-Neumann-Architektur> #glossary\n00:26:29 Harvard-Architektur <https://de.wikipedia.org/wiki/Harvard-Architektur> #glossary\n00:27:04 x86 <https://de.wikipedia.org/wiki/X86-Prozessor> #glossary\n00:27:05 ADM64 <https://de.wikipedia.org/wiki/AMD64> #glossary\n00:27:08 ARM <https://de.wikipedia.org/wiki/ARM-Architektur> #glossary\n00:27:10 PowerPC <https://de.wikipedia.org/wiki/PowerPC> #glossary\n00:27:35 Vektorrechner <https://de.wikipedia.org/wiki/Vektorprozessor> #glossary\n00:28:06 SIMD (Single Instruction, Multiple Data) <https://de.wikipedia.org/wiki/Flynnsche_Klassifikation#SIMD_.28Single_Instruction.2C_Multiple_Data.29> #glossary\n00:28:23 OpenGL <https://de.wikipedia.org/wiki/OpenGL> #glossary\n00:28:41 Shader <https://de.wikipedia.org/wiki/Shader> #glossary\n00:29:46 Zusammenfassung\n\n00:30:36 Vergleich zum GCC #chapter\n00:30:53 Java VM <https://de.wikipedia.org/wiki/Java_Virtual_Machine> #glossary\n00:31:23 LLVM und GCC setzen auf Static Single Assignments auf\n00:31:32 Unterschiede liegen in der Implementierung\n00:32:25 LLVM Dokumentation <http://llvm.org/docs/>\n00:32:38 Softwarearchitektur <https://de.wikipedia.org/wiki/Softwarearchitektur> #glossary\n00:32:56 GCC Gimple <https://en.wikipedia.org/wiki/GIMPLE> #glossary\n00:32:59 GCC RTL <https://en.wikipedia.org/wiki/Register_Transfer_Language#In_GCC> #glossary\n00:34:03 “Gnade der späten Geburt” <https://de.wikipedia.org/wiki/Gnade_der_sp%C3%A4ten_Geburt> #glossary\n\n00:34:43 LLVM Zwischensprache #chapter\n00:34:46 Die Operationen sind ähnlich zu Assembler\n00:35:12 Register <https://de.wikipedia.org/wiki/Register_(Computer)> #glossary\n00:35:16 In SSA ist jeder Datenplatz ein-eindeutig\n00:36:35 Modulgröße im Backend\n00:37:32 Compilezeiten\n00:39:27 Fehlermeldungen von clang\n00:40:23 Apple und clang\n00:40:39 Chris Lattner <http://www.nondot.org/sabre/>\n00:40:57 Mutmaßungen zur Strategie von Apple\n00:41:12 - Fehlermeldungen\n00:41:50 - Compilezeiten\n00:43:28 JIT-Kompilierung <https://de.wikipedia.org/wiki/Just-in-time-Kompilierung> #glossary\n00:44:21 Zwischensprache ist sehr kompakt und kann mitgespeichert werden\n00:45:41 Parallelisierung <https://de.wikipedia.org/wiki/Nebenl%C3%A4ufigkeit> #glossary\n00:45:51 Multiple Cores <https://de.wikipedia.org/wiki/Mehrprozessorsystem> #glossary\n00:45:55 SIMD (Single Instruction, Multiple Data) <https://de.wikipedia.org/wiki/Flynnsche_Klassifikation#SIMD_.28Single_Instruction.2C_Multiple_Data.29> #glossary\n00:46:08 Parallelisierung des Compile-Vorgangs\n00:47:11 Parallelisierung des produzierten Codes\n00:47:40 Flynnsche Klassifikation <https://de.wikipedia.org/wiki/Flynnsche_Klassifikation> #glossary\n00:47:58 AltiVec <https://de.wikipedia.org/wiki/AltiVec> #glossary\n00:48:01 SSE <https://de.wikipedia.org/wiki/Streaming_SIMD_Extensions> #glossary\n00:48:13 Dynamische Typisierung <https://de.wikipedia.org/wiki/Dynamische_Typisierung> #glossary\n00:48:22 Skriptsprache <https://de.wikipedia.org/wiki/Skriptsprache> #glossary\n00:48:26 Runtime <https://de.wikipedia.org/wiki/Laufzeitumgebung> #glossary\n\n00:49:04 Praktische Anwendung #chapter\n00:49:26 Wo kommt LLVM schon zum Einsatz?\n00:49:41 Adobe Flash <https://de.wikipedia.org/wiki/Adobe_Flash> #glossary\n00:49:55 LLVM Developer Meeting 2008 <http://llvm.org/devmtg/2008-08/>\n00:50:31 Vortrag von Scott Petersen\n00:50:32 - Vortragsfolien <http://llvm.org/devmtg/2008-08/Petersen_FlashCCompiler.pdf>\n00:50:33 - Video Hi <http://llvm.org/devmtg/2008-08/Petersen_FlashCCompiler_Hi.m4v>\n00:50:34 - Video Lo <http://llvm.org/devmtg/2008-08/Petersen_FlashCCompiler_Lo.3gp>\n\n00:51:58 Ressourcen #chapter\n00:52:19 LLVM Developer Meetings <http://llvm.org/devmtg/>\n00:52:32 Vortrag von Tim Sander\n00:52:33 - Vortragsfolien <http://llvm.org/devmtg/2008-08/Sander_HW-SW-CoDesignflowWithLLVM.pdf>\n00:52:34 - Video Hi <http://llvm.org/devmtg/2008-08/Sander_HW-SW-CoDesignflowWithLLVM_Hi.m4v>\n00:52:35 - Video Lo <http://llvm.org/devmtg/2008-08/Sander_HW-SW-CoDesignflowWithLLVM_Lo.3gp>\n00:52:59 Google Tech Talk: Chris Lattner: LLVM 2.0 <https://www.youtube.com/watch?v=VeRaLPupGks>\n00:53:11 LLVM Developer Meeting 2008 <http://llvm.org/devmtg/2008-08/>\n00:54:06 Doxygen <https://de.wikipedia.org/wiki/Doxygen> #glossary\n00:54:07 LLVM Doxygen Dokumentation <http://llvm.org/doxygen/>\n00:54:25 LLVM Online Compiler\n\n00:54:50 Für wen ist LLVM interessant? #chapter\n00:55:52 Sample Frontend\n00:56:40 Tims Optimierungslauf\n00:58:04 Macht Spaß in der Forschung\n00:58:32 Compilerbau <https://de.wikipedia.org/wiki/Compilerbau> #glossary\n00:58:40 “Und dann kam die Aussage: ‘Compilerbau ist doch tot, da entwickelt sich doch nichts mehr.’” (Tim Sander) #quote\n00:59:43 “Und für jemanden, der Informatik studiert und noch ein schönes Diplomthema braucht wäre das dann vielleicht auch der richtige Sandkasten, in den man sich mal reinsetzt um mal ordentlich mit Sand zu werfen.” (Tim Pritlove) #quote\n\n01:00:11 Abschluss #chapter\n01:01:01 CRE Outro\n\n"}